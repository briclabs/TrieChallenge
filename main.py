from base_segment_trie import BaseSegmentTrie


SAMPLE_1_SEGMENT_BASES: [str] = [
    "ACTG",
    "AACT",
    "TCAGG",
    "TTGGA"
]

SAMPLE_2_SEGMENT_BASES = [
    "ACTG",
    "AACT",
    "TCAGG",
    "ACTG",
    "ACTG",
    "GGCG",
    "TTGGA"
]

#  Testing how a larger sample would perform.
SAMPLE_3_SEGMENT_BASES = [
    "CTAGGATNT",
    "NCNTGCGCA",
    "CGAGTACTA",
    "GTNGAGTGT",
    "NTCCAAGNC",
    "NNATNCAGT",
    "CCTCCGCNG",
    "NCGGCCGAC",
    "TTNNNTNGG",
    "CATTGTCCT",
    "AANTNAGTT",
    "TGNCTNAGT",
    "CNGCCACCG",
    "GNGGTTTGA",
    "NGGGANTTN",
    "CTTAGNNTT",
    "ATGANTGNC",
    "CANGNTATN",
    "GTAACAAAT",
    "TGAGATNGN",
    "ACTAAAGGT",
    "GNGTCTGTC",
    "CNTATGGAA",
    "TCTAGTCNN",
    "AATCCANCN",
    "AACCACGAG",
    "GNNGCAGAA",
    "NGCAACAAG",
    "AANTCTNCG",
    "GNGGANATC",
    "NTNNNGGAN",
    "TCTGNGNNA",
    "ATAGCTNCA",
    "AAATCNGAA",
    "CCTAGAGCG",
    "TAGGGAAGC",
    "NNACCCACN",
    "TTACGAGNC",
    "GCCATCGNT",
    "ATTNACNGA",
    "GANATAAGN",
    "CGACNTGTC",
    "TAGNTGGGN",
    "GTGNGAAAT",
    "AGCATGTNA",
    "NTAAGGCCT",
    "NATCACNGC",
    "ATCGCCTTT",
    "GACCNACTG",
    "CNACANNNC",
    "ACTAGNTNN",
    "CCGCGGGCN",
    "CACACGGGN",
    "CTNTNGGCG",
    "ACNTTTNTG",
    "NGTGTCNTG",
    "ACANACTTN",
    "GCAGCNTCN",
    "GTGGTAGCC",
    "TACGTANAC",
    "TNGNCAGTG",
    "CNNTNAGCT",
    "CTNNGTNGC",
    "CGGCANGGG",
    "CAACNCANG",
    "NTTAATGGT",
    "NNGCNNANG",
    "GTTTNTCCC",
    "GCCNCNACN",
    "GNCACGTTC",
    "GTCCGCCAT",
    "TGANCAGTG",
    "NGNATACAA",
    "TACGATCAA",
    "TTCNCTATA",
    "ATNNCCNAT",
    "TAAGTGAGT",
    "NGNAGCNCT",
    "GTNGGGTGT",
    "CTNCTGCAN",
    "ANGNATAAC",
    "GTCATAGNT",
    "ATCNCTGNC",
    "NCCNNAGCA",
    "TTCNTCGCG",
    "NTGNNAAGA",
    "CGCATNAAT",
    "TTNCTNAAN",
    "CCGCATCNN",
    "NCNTNNCGT",
    "GTTTGTGGC",
    "TGNACCANC",
    "CGGAGANTN",
    "AGTTCTGGN",
    "GGGACACNN",
    "GCTNNGAGT",
    "ATTTNCATN",
    "GTTTGAGCN",
    "NNCGGCCNG",
    "ATAGCGGTT",
    "TACAGNGNN",
    "GGNGGNGNC",
    "NCTGCGTAN",
    "CTCGNATNN",
    "NTGATGANN",
    "GTAGACCTT",
    "ANCNGAGGG",
    "NGCGTTAAC",
    "GGAACTTCN",
    "TAGTCNANT",
    "NCGCCATCN",
    "GANCGNNGT",
    "GGCATCGAT",
    "GNGACGNTC",
    "AAGNATNAA",
    "TGACGCTAG",
    "NATAGAANN",
    "CAGAGCNNA",
    "NNACNTAGG",
    "ANGGGGCGA",
    "NGTACGGCC",
    "NNTATCANN",
    "CCGANGGCT",
    "CTTTACATC",
    "GACTTGCGT",
    "ANNAANCAT",
    "GTCTNNCTC",
    "AAAAGNGAA",
    "GNANAGAGC",
    "GAAACCCAT",
    "GTTTNTNAA",
    "GTGNGTTTN",
    "TNTTANNAG",
    "NNGCTGNTA",
    "ATATANATT",
    "CGCGGGNAA",
    "ACCTCATTN",
    "ANNTATNNC",
    "TAANAATTC",
    "NTGTGTGAA",
    "NCACTGTAN",
    "TGAAGATCC",
    "GCNNGATCG",
    "GGCGGAATC",
    "CCANCGAGN",
    "CTAANANTA",
    "AANCTTAAG",
    "GNGTCTTNG",
    "CAACANCAA",
    "AGCGNGNAG",
    "CNCCNAGGT",
    "GTAGGGNGT",
    "ATTATNCCN",
    "TNTGGANCA",
    "AAATCANTC",
    "NGTCCGNGA",
    "TATTGANCG",
    "TTGAGACGT",
    "TCTTTNCGG",
    "TTCNANTNN",
    "NCTGNTTNA",
    "TAGNNNGTT",
    "CGCCTGAGT",
    "CTTGTGGGN",
    "NTNGNTACA",
    "TAGATAANG",
    "TCGCNTNGN",
    "TGANCTGAA",
    "CTNTTCATT",
    "ACGCNTNNT",
    "NNCCCNTNA",
    "TNGAGAAGA",
    "CGANTAATA",
    "CNCGCCTAA",
    "CGCANNAAG",
    "ATCCNACAC",
    "NCGNACCAC",
    "GNTANNTCC",
    "ATGNCCTAG",
    "NCCTGAANA",
    "GGCAGACGA",
    "CCCACNGGN",
    "CNAAGCNCT",
    "ATGGGGACT",
    "NGCANNCTC",
    "CGGCNCGCG",
    "ACACACTCN",
    "CNTNANNTG",
    "NGCCCTGNC",
    "NNNTGAANC",
    "CGANGCGNA",
    "GNAANANNC",
    "GACGTCANC",
    "ACAGAGTGG",
    "TGNNCTNNT",
    "NNCGTNNGT",
    "CTGCACTGN",
    "NAATNNGGG",
    "CGGANCTCN",
    "CCGTGAACT",
    "ACNCNCCTG",
    "NTCNATNNT",
    "GTATTCTGG",
    "GNCCGGTNT",
    "AGTNGNACC",
    "TCATANAGG",
    "AGCATCCCG",
    "GNATAATCA",
    "TAATCNTTG",
    "CCAATGCCT",
    "TGGAATTTA",
    "GGNTTCGAC",
    "AAAAGCGNT",
    "GATGGAAGN",
    "ACCCGGNAC",
    "GTNNCCNGT",
    "GGCACGGGT",
    "TCCNGNCGT",
    "TTAGCCGTN",
    "TNAAAGNCA",
    "TATATNGTN",
    "AGNTNATGN",
    "GCANAGCGA",
    "CGNGNACTT",
    "GCCTNGAGG",
    "CTNCCGAAG",
    "TNNGCCTNA",
    "GAACCGNNG",
    "TANGACTAT",
    "TAATCGCGA",
    "CTCCNCANC",
    "NCNAATTGG",
    "AANCNCACC",
    "GTCGTNNCC",
    "TNAATTTNN",
    "CNTCGTTNN",
    "TNGCANCNA",
    "TNTCAGCCT",
    "NTTCTTTTT",
    "CCTGGCCTC",
    "GGTTANTTT",
    "NGTACNCCN",
    "NCCNGNGCT",
    "ATGGCAGAT",
    "GCTCNATGG",
    "NNCNGGGTT",
    "CNCCCAANC",
    "AAATTCGGN",
    "GNGGNAGNN",
    "ACGCGTCTC",
    "TCANACGGC",
    "GNTANNNCC",
    "CCCACNNCT",
    "ACANGGACC",
    "GTGTCATAN",
    "CTNCCTTCN",
    "ANCGCACCN",
    "ANAATTNAC",
    "NTCCTCANN",
    "CTGGTCANC",
    "ATAGGTGGA",
    "ANGGNANGN",
    "CNNACNAAA",
    "NAGANNATG",
    "TTCCTGCCA",
    "NCTTNGCNC",
    "NNGGTTTTN",
    "CNCCATNTC",
    "NCTTTNNNA",
    "NTACGNNGC",
    "TNTNCNCNA",
    "GNTTTGCGG",
    "TGTTTGNCC",
    "GNGCTCAGG",
    "GNNCACGCC",
    "NACGGGTAN",
    "TTCNNCGTG",
    "AGACACANN",
    "NTTAGCAAN",
    "CATTNNGTC",
    "CNTAAGNTC",
    "GNTTATCTA",
    "TATCACACA",
    "TANTCCGAC",
    "CAGGTNANN",
    "NCAGCGGTN",
    "TNCCCAGNG",
    "NAAGTNACG",
    "TACNCNTAN",
    "GGANTANNC",
    "CGTGCNNNA",
    "GCGTGNNGT",
    "ATCAGTNTG",
    "CGGGGTGCG",
    "GNTCATNTA",
    "CCGTCNCCC",
    "NTATGTCGC",
    "GNTAAGAGG",
    "NCTGGGAGA",
    "CGGCCCCCG"
]


def main():

    sample_1 = BaseSegmentTrie()
    sample_1.record(SAMPLE_1_SEGMENT_BASES)

    sample_2 = BaseSegmentTrie()
    sample_2.record(SAMPLE_2_SEGMENT_BASES)

    sample_3 = BaseSegmentTrie()
    sample_3.record(SAMPLE_3_SEGMENT_BASES)

    print("")
    sample_number: int = 1  # Simple scheme for "labelling" samples for the sake of the run_report output.
    for sample in [sample_1, sample_2, sample_3]:
        label = "S" + sample_number.__str__()
        bases_to_search_for = {"GC", "ACGT", "AACCGGTT", "ACGTN"}
        run_report(label, sample, bases_to_search_for)
        sample_number += 1


# Print a report of the statistics for bases present in the samples recorded.
def run_report(label: str, sample: BaseSegmentTrie, bases_to_search_for: {str}):
    print(" === SAMPLE " + label + " ===")
    total_sample_base_count = sample.count_matching_bases("ACTGN")
    print("  " + total_sample_base_count.__str__() + " sample bases")
    print("  " + sample.total_base_node_count.__str__() + " trie nodes")
    print("  compression percentile: " + (sample.total_base_node_count / total_sample_base_count).__str__())
    print("")

    for base_set_to_search_for in bases_to_search_for:
        search_count = sample.count_matching_bases(base_set_to_search_for)
        search_count_fraction: str = search_count.__str__() + "/" + total_sample_base_count.__str__()
        search_percentile: str = (search_count / total_sample_base_count).__str__()
        print("  Searching sample for bases [" + base_set_to_search_for + "]:")
        print("    " + search_count_fraction + " (" + search_percentile + ")")

    print("")


if __name__ == '__main__':
    main()
